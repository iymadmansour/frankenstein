#ifndef EGS_CUBIC_LATTICE_
#define EGS_CUBIC_LATTICE_

#include "egs_base_geometry.h"
#include "egs_transformations.h"
#include "egs_rndm.h"

#ifdef WIN32

#ifdef BUILD_CUBIC_LATTICE_DLL
#define EGS_CUBIC_LATTICE_EXPORT __declspec(dllexport)
#else
#define EGS_CUBIC_LATTICE_EXPORT __declspec(dllimport)
#endif
#define EGS_CUBIC_LATTICE_LOCAL 

#else

#ifdef HAVE_VISIBILITY
#define EGS_CUBIC_LATTICE_EXPORT __attribute__ ((visibility ("default")))
#define EGS_CUBIC_LATTICE_LOCAL  __attribute__ ((visibility ("hidden")))
#else
#define EGS_CUBIC_LATTICE_EXPORT
#define EGS_CUBIC_LATTICE_LOCAL
#endif

#endif

/* Input Example
:start geometry:
	library            = egs_cubic_lattice
	name               = phantom_w_microcavity
	base geometry      = phantom
	subgeometry        = microcavity
	subgeometry index  = 0
	volumetric density = 1
	enveloping radius  = 0.001
	largest spacing    = 0.001
:stop geometry:
*/

class EGS_DummyGeometry : 
            public EGS_BaseGeometry {

protected:

    EGS_BaseGeometry    *g;   //!< The geometry being transformed
    EGS_AffineTransform T;    //!< The affine transformation
    string              type; //!< The geometry type

public:

    /*! \brief Construct a geometry that is a copy of the geometry \a G 
    transformed by \a t
    */
    EGS_DummyGeometry(EGS_BaseGeometry *G, const EGS_AffineTransform &t, 
            const string &Name = "") : EGS_BaseGeometry(Name), g(G), T(t) {
        type = g->getType(); type += "T"; nreg = g->regions();
        is_convex = g->isConvex();
        has_rho_scaling = g->hasRhoScaling();
    };

    ~EGS_DummyGeometry() { if( !g->deref() ) delete g; };

    void setTransformation(const EGS_AffineTransform &t) {/*cout<<"\t\tTransformation changed to ["<<t.getTranslation().x<<","<<t.getTranslation().y<<","<<t.getTranslation().z<<"]\n";*/ T = t; };

    int computeIntersections(int ireg, int n, const EGS_Vector &x,
            const EGS_Vector &u, EGS_GeometryIntersections *isections) {
        EGS_Vector xt(x), ut(u);
        T.inverseTransform(xt); T.rotateInverse(ut);
        return g->computeIntersections(ireg,n,xt,ut,isections);
        //return g->computeIntersections(ireg,n,x*T,u*T.getRotation(),isections);
    };
    bool isRealRegion(int ireg) const {
        return g->isRealRegion(ireg);
    };
    bool isInside(const EGS_Vector &x) { 
        EGS_Vector xt(x); T.inverseTransform(xt);
        return g->isInside(xt);
        //return g->isInside(x*T); 
    };
    int isWhere(const EGS_Vector &x) { 
        EGS_Vector xt(x); T.inverseTransform(xt);
        return g->isWhere(xt); 
        //return g->isWhere(x*T); 
    };
    int inside(const EGS_Vector &x) { return isWhere(x); };

    int medium(int ireg) const { return g->medium(ireg); };

    EGS_Float howfarToOutside(int ireg, const EGS_Vector &x, 
            const EGS_Vector &u) {
        return ireg >= 0 ? g->howfarToOutside(ireg,x*T,u*T.getRotation()) : 0;
    };
    int howfar(int ireg, const EGS_Vector &x, const EGS_Vector &u, 
           EGS_Float &t, int *newmed=0, EGS_Vector *normal=0) { 
        EGS_Vector xt(x), ut(u);
        T.inverseTransform(xt); T.rotateInverse(ut);
        int inew = g->howfar(ireg,xt,ut,t,newmed,normal); 
        //int inew = g->howfar(ireg,x*T,u*T.getRotation(),t,newmed,normal); 
        if( inew != ireg && normal ) 
            *normal = T.getRotation()*(*normal);
        return inew;
    };

    EGS_Float hownear(int ireg, const EGS_Vector &x) {
        EGS_Vector xt(x); T.inverseTransform(xt);
        return g->hownear(ireg,xt);
        //return g->hownear(ireg,x*T);
    };

    int getMaxStep() const { return g->getMaxStep(); };

    // Not sure about the following.
    // If I leave the implementation that way, all transformed copies of a 
    // geometry share the same boolean properties. But that may not be 
    // what the user wants. So, I should implement both options: 
    // all copies share the same properties and the user has the options 
    // to define separate properties for each copy.
    bool hasBooleanProperty(int ireg, EGS_BPType prop) const {
        return g->hasBooleanProperty(ireg,prop);
    };
    void setBooleanProperty(EGS_BPType prop) {
        g->setBooleanProperty(prop);
    };
    void addBooleanProperty(int bit) {
        g->addBooleanProperty(bit);
    };
    void setBooleanProperty(EGS_BPType prop, int start, int end, int step=1) {
        g->setBooleanProperty(prop,start,end,step);
    };
    void addBooleanProperty(int bit, int start, int end, int step=1) {
        g->addBooleanProperty(bit,start,end,step);
    };

    const string &getType() const { return type; };

    EGS_Float getRelativeRho(int ireg) const {
        return g->getRelativeRho(ireg);
    }
    void setRelativeRho(int start, int end, EGS_Float rho);
    void setRelativeRho(EGS_Input *);

protected:

    /*! \brief Don't define media in the transformed geometry definition.

    This function is re-implemented to warn the user to not define 
    media in the definition of a transformed geometry. Instead, media should 
    be defined when specifying the geometry to be transformed.
    */
    void setMedia(EGS_Input *inp,int,const int *);

};

class EGS_CUBIC_LATTICE_EXPORT EGS_SubGeometry : 
            public EGS_BaseGeometry {
protected:

    EGS_BaseGeometry*  base;     //!< The geometry within which the sub geometry appears
    EGS_DummyGeometry* sub;      //!< The sub geometry that could appear within base 
	int                ind;      //!< The region in base geom where we could encounter sub geom
	int                maxStep;  //!< The maximum number of steps
	EGS_Float          spacing;  //!< The closest distance between two sub geoms
	EGS_Float          spacing2; //!< Used in a check in howfar calls
	//EGS_Float          rad;      //!< The radius of a sphere that completely encompasses sub geom
	//EGS_Float          rad2;     //!< The radius of a sphere that completely encompasses sub geom
	bool               virt;     //!< Tells us whether or not we are in the sub geom
    string             type;     //!< The geometry type

public:

    EGS_SubGeometry(EGS_BaseGeometry *B, EGS_BaseGeometry *S, int i, /*EGS_Float r,*/ EGS_Float vd, EGS_Float width, const string &Name = "")
		: EGS_BaseGeometry(Name), base(B), ind(i), /*rad(r), rad2(r*r),*/ spacing(pow(vd,-1.0/3.0))
	{
		sub             = new EGS_DummyGeometry(S,EGS_Vector(0,0,0));
        type            = base->getType(); type += " with "; type += sub->getType(); type += " in a cubic lattice";
		nreg            = base->regions() + sub->regions();
        is_convex       = false; //base->isConvex();
        has_rho_scaling = base->hasRhoScaling();
		virt            = false;
		maxStep         = base->regions()+int(width/spacing)*sub->regions();
		spacing2        = spacing*spacing;
    };

    ~EGS_SubGeometry()
	{
		if(!sub->deref())
			delete sub;
		if(!base->deref())
			delete base;
	};
	
	EGS_Vector closestPoint(const EGS_Vector &x)
	{
		int i, j, k;
		
		// Get the indices of the lattice point
		i = int(round(x.x/spacing));
		j = int(round(x.y/spacing));
		k = int(round(x.z/spacing));
		
		return EGS_Vector(i, j, k)*spacing;
	};
	
    int computeIntersections(int ireg, int n, const EGS_Vector &x, const EGS_Vector &u, EGS_GeometryIntersections *isections)
	{
		int debug = 0;
		if(debug) cout << "lattice  computeIntersections(" << ireg << "," << n << ",[" << x.x << "," << x.y << "," << x.z << "],[" << u.x << "," << u.y << "," << u.z << "])\n";
		return base->computeIntersections(ireg,n,x,u,isections);
    };
	
    bool isRealRegion(int ireg) const
	{
		int debug = 0;
		if(debug) cout << "lattice  isRealRegion(" << ireg << ")\n";
		if (ireg < base->regions()) // If ireg is less than base regions
			return base->isRealRegion(ireg); // check against base regions
		return sub->isRealRegion(ireg - base->regions()); // then check subregions
    };
	
    bool isInside(const EGS_Vector &x)
	{
		int debug = 0;
		if(debug) cout << "lattice  isInside([" << x.x << "," << x.y << "," << x.z << "])\n";
        return base->isInside(x);
    };
	
    int isWhere(const EGS_Vector &x)
	{
		int debug = 0;
		if(debug) cout << "lattice  isWhere([" << x.x << "," << x.y << "," << x.z << "])\n";
		int temp = base->isWhere(x);
		
		// Are we in the subgeom?
		if (temp == ind)
		{
			//cout << "\tisWhere invoking setTransformation\n";
			sub->setTransformation(closestPoint(x));
			if (sub->isInside(x))
				return sub->isWhere(x) + base->regions();
		}
		return temp; // otherwise base geom		
    };
	
    int inside(const EGS_Vector &x)
	{
		int debug = 0;
		if(debug) cout << "lattice  inside([" << x.x << "," << x.y << "," << x.z << "])\n";
		return isWhere(x);
	};

    int medium(int ireg) const
	{
		int debug = 0;
		if(debug) cout << "lattice  medium(" << ireg << ")\n";
		if (ireg >= base->regions()) // If ireg is greater than base regions
			return sub->medium(ireg-base->regions());
		return base->medium(ireg); // If in base region
	};

    EGS_Float howfarToOutside(int ireg, const EGS_Vector &x, const EGS_Vector &u)
	{
		int debug = 0;
		if(debug) cout << "lattice  howfarToOutside(" << ireg << ",[" << x.x << "," << x.y << "," << x.z << "],[" << u.x << "," << u.y << "," << u.z << "])\n";
		if (ireg < 0) // Error catch, not inside
			return 0;
			
		// Are we in the subgeom
		if (ireg >= base->regions())
			return base->howfarToOutside(ind,x,u);
		return base->howfarToOutside(ireg,x,u);	
    };

	// This is where things get messy, this function will be trimodal, whether we are in non-ind base, ind base or sub
    int howfar(int ireg, const EGS_Vector &x, const EGS_Vector &u, EGS_Float &t, int *newmed=0, EGS_Vector *normal=0)
	{
		// Are we in the subgeom?
		if (ireg >= base->regions())
		{
			//cout << "\thowFar subgeom case invoking setTransformation\n";
			sub->setTransformation(closestPoint(x));
		
			// Do the howfar call
			EGS_Float tempT = t;
			int tempReg = sub->howfar(ireg-base->regions(),x,u,tempT,newmed,normal);
			
			// If we do leave the subgeom, we want to return the index
			// of the region of the base geometry we would be entering,
			// which is not necessarily ind is subgeom is at the
			// boundary
			EGS_Vector newX = u; newX.normalize(); newX = x + (newX * tempT);
			
			if (!(tempReg+1) || base->isWhere(newX) != ind)
			{
				t = tempT;				
				
				tempReg = base->howfar(ind,x,u,t,0,normal);
				if (newmed && tempReg >= 0)
					*newmed = base->medium(tempReg);
				return tempReg; 
			}
			
			t = tempT;
			if (newmed && tempReg >= 0)
				*newmed = sub->medium(tempReg);
			return tempReg+base->regions();
		}
		else if (ireg == ind) // If we are in the region that could contain subgeoms
		{
			/* This works but is slow
			// Determine the path travelled ------------------------------------------------ //
			EGS_Float tempT = t;
			EGS_Float maxT;
			EGS_Vector v = u; v.normalize();
			EGS_Vector p = x, q; // Initial and final point through ind region
			base->howfar(ireg,x,u,tempT); // Get how far it is in temp
			maxT = tempT; // maxT will remember the maximum total distance we can travel
			
			// Now we need to extend v to match the path travelled plus some buffer room for another
			// lattice position intersection
			v *= tempT;
			q = p + v;
			
			// Iterate through the lattice ------------------------------------------------- //
			int zi, xi, yi; // Initial indices
			int zs, xs, ys; // Iteration sign
			int zf, xf, yf; // Final indices
			int i, j, k; // Intermediate indices
			int X, Y, Z; // Current closest intersecting subgeom
			EGS_Float min = t; // Distance to subgeom at X, Y, Z
			
			// Z values
			zi = int(round(p.z/spacing));
			zf = int(round(q.z/spacing));
			
			// X values
			xi = int(round(p.x/spacing));
			xf = int(round(q.x/spacing));
			
			// Y values
			yi = int(round(p.y/spacing));
			yf = int(round(q.y/spacing));
			
			// Reorder so initial is lower
			if (zi > zf) zs = -1; else zs = 1;
			if (xi > xf) xs = -1; else xs = 1;
			if (yi > yf) ys = -1; else ys = 1;
			
			// Expand search by one index in each direction
			zf+=zs; zi-=zs;
			xf+=xs; xi-=xs;
			yf+=ys; yi-=ys;
			
			if(debug) cout << "\t\t Iterating from (" << p.x << "," << p.y << "," << p.z << ") to (" << q.x << "," << q.y << "," << q.z << ")\n";
			if(debug) cout << "\t\t Iterating from (" << xi << "," << yi << "," << zi << ") to (" << xf << "," << yf << "," << zf << ")\n";
			if(debug) cout << "\t\t with vector (" << xs << "," << ys << "," << zs << ") for " << (xf-zi)*(yf-yi)*(zf-zi)*xs*ys*zs << " steps\n";
			
			// Holds temporary position as we iterate through
			EGS_Vector tempP;
			
			
			// Iterate through all the subgeoms in this square ----------------------------- //
			v.normalize();
			for (k = zi; k != zf; k+=zs)
			{
				tempP.z = k*spacing;
				for (j = yi; j != yf; j+=ys)
				{
					tempP.y = j*spacing;
					for (i = xi; i != xf; i+=xs)
					{
						tempP.x = i*spacing;
						if (base->isInside(tempP))
						{
							sub->setTransformation(tempP);
							
							tempT = t;
							if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
								if (tempT > 0 && tempT < min && tempT < maxT)
								{
									X = i; Y = j; Z = k;
									min = tempT;
								}
						}
					}
				}
			}
			*/
			/* Removed for not being precise
			// Determine the path travelled ------------------------------------------------ //
			EGS_Float tempT = t;
			base->howfar(ireg,x,u,tempT); // Get how far it is in temp
			EGS_Float max = tempT;
			
			// Iterate through the lattice ------------------------------------------------- //
			EGS_Float min = max; // Distance to closest subgeom, if no intersection it stays max
			EGS_Vector jump = u*(spacing/(u.length()));
			EGS_Vector tempP; // Temporarily hold indices of subgeom we are testing against
			EGS_Vector finalP; // Current closest intersecting subgeom
			
			//// Find two perpendicular vectors to get 4 points at spacing away from x perpendicular to u
			//EGS_Vector perp1(-x.y,x.x,0), perp2(-x.z*x.x,-x.z*x.y,x.x*x.x+x.y*x.y);
			//perp1.normalize(); perp2.normalize();
			//perp1 *= spacing/2.0; perp2 *= spacing/2.0;
			//
			//// The four points described earlier as well as a new x, which will shift in intervals of spacing
			//EGS_Vector x0[5];
			//x0[0] = x+(jump*0.5); // Perform a half spacing step to have an initial position half a spacing down the trajectory
			//x0[1] = x0[0]-perp1; x0[2] = x0[0]-perp2; x0[3] = x0[0]+perp1; x0[4] = x0[0]+perp2;
			//
			//while ((x-x0[0]).length() < min) // Quit as soon as our testing position is beyond current closest intersection (which could be tempT)
			//	for (int i = 0; i < 5; i++)
			//	{
			//		tempT = min;
			//		tempP = closestPoint(x0[i]);
			//		sub->setTransformation(tempP);
			//		if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
			//		{
			//			finalP = tempP;
			//			min = tempT;
			//		}
			//		x0[i] += jump;
			//	}
			EGS_Vector x0 = x;
			EGS_Float max2 = max*max;
			jump *= 0.25;
			
			while ((x-x0).length2() < max2) // Quit as soon as our testing position is beyond current closest intersection (which could be tempT)
			{
				tempT = min;
				tempP = closestPoint(x0);
				sub->setTransformation(tempP);
				if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
					if(tempT < max)
					{
						finalP = tempP;
						min = tempT;
						break;
					}
				x0 += jump;
			}
			*/
			
			// Determine the path travelled ------------------------------------------------ //
			EGS_Float tempT = t;
			base->howfar(ireg,x,u,tempT); // Get how far it is in temp
			EGS_Float max = tempT;
			
			// Iterate through the lattice ------------------------------------------------- //
			EGS_Float min = max, minX = max, minY = max, minZ = max; // Distance to closest subgeom for three different cases
			EGS_Vector unit = u; unit.normalize();
			EGS_Vector xInt = unit*(spacing/2.0/fabs(unit.x)), yInt = unit*(spacing/2.0/fabs(unit.y)), zInt = unit*(spacing/2.0/fabs(unit.z));
			EGS_Vector tempP; // Temporarily hold indices of subgeom we are testing against
			EGS_Vector finalP, finalX, finalY, finalZ; // Current closest intersecting subgeom
			
			EGS_Vector x0;
			EGS_Float max2 = max*max;
			
			x0 = x;
			while ((x-x0).length2() < max2) // Quit as soon as our testing position is beyond current closest intersection (which could be tempT)
			{
				tempT = minX;
				tempP = closestPoint(x0);
				sub->setTransformation(tempP);
				if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
					if(tempT < max)
					{
						finalX = tempP;
						minX = tempT;
						break;
					}
				x0 += xInt;
			}
			
			x0 = x;
			while ((x-x0).length2() < max2) // Quit as soon as our testing position is beyond current closest intersection (which could be tempT)
			{
				tempT = minY;
				tempP = closestPoint(x0);
				sub->setTransformation(tempP);
				if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
					if(tempT < max)
					{
						finalY = tempP;
						minY = tempT;
						break;
					}
				x0 += yInt;
			}
			
			x0 = x;
			while ((x-x0).length2() < max2) // Quit as soon as our testing position is beyond current closest intersection (which could be tempT)
			{
				tempT = minZ;
				tempP = closestPoint(x0);
				sub->setTransformation(tempP);
				if (sub->howfar(-1,x,u,tempT)+1) // Intersection!
					if(tempT < max)
					{
						finalZ = tempP;
						minZ = tempT;
						break;
					}
				x0 += zInt;
			}
			
			finalP = finalX; min = minX;
			if (min > minY) {min = minY; finalP = finalY;}
			if (min > minZ) {min = minZ; finalP = finalZ;}
			
			// We did intersect subgeom
			if (min < max)
			{
				tempT = t;
				sub->setTransformation(finalP);
				int tempReg = sub->howfar(-1,x,u,tempT,newmed,normal);
				if (tempReg+1)
				{
					if (newmed && tempReg >= 0)
						*newmed = sub->medium(tempReg);
					t = tempT;
					return tempReg+base->regions();
				}
			}
			
			// We didn't intersect subgeom
			int tempReg = base->howfar(ireg,x,u,t,newmed,normal);
			if (newmed && tempReg >= 0)
				*newmed = base->medium(tempReg);
			return tempReg;
		}
		else // Not in region containing subgeoms, then it is quite easy
		{    // unless we enter directly into a subgeom when entering
		     // region ind
			int tempReg = base->howfar(ireg,x,u,t,newmed,normal);
			
			// If we enter region ind
			if (tempReg == ind)
			{
				// newX is the point of entrance
				EGS_Vector newX = u; newX.normalize(); newX = x + (newX * t); 
				
				sub->setTransformation(closestPoint(newX));
				int newReg = sub->isWhere(newX); // see what region we are in
				if (newReg+1)                    // in subgeom, if its not -1
				{                                // then return the proper
					        				     // media and region
						
					if (newmed && newReg >= 0)
						*newmed = sub->medium(newReg);
					return newReg + base->regions();
				}
			}
			
			if (newmed && tempReg >= 0)
				*newmed = base->medium(tempReg);
			return tempReg;
		}
    };
	
    EGS_Float hownear(int ireg, const EGS_Vector &x)
	{
		int debug = 0;
		if(debug) cout << "lattice  hownear(" << ireg << ",[" << x.x << "," << x.y << "," << x.z << "])\n";
		if (ireg >= base->regions())
		{
			if(debug) cout << "\thowNear subgeom case invoking setTransformation to " << closestPoint(x).x << "," << closestPoint(x).y << "," << closestPoint(x).z << "\n";
			if(debug) cout << "\tClosest subgeom distance is " << sqrt((x.x-round(x.x))*(x.x-round(x.x))+(x.y-round(x.y))*(x.y-round(x.y))+(x.z-round(x.z))*(x.z-round(x.z))) << "\n";
			sub->setTransformation(closestPoint(x));
			if(debug) cout << "\tReturning " << sub->hownear(ireg-base->regions(),x) << "\n";
			return sub->hownear(ireg-base->regions(),x);
		}
		else if (ireg == ind)
		{
			if(debug) cout << "\thowNear ind case invoking setTransformation to " << closestPoint(x).x << "," << closestPoint(x).y << "," << closestPoint(x).z << "\n";
			if(debug) cout << "\tClosest subgeom distance is " << sqrt((x.x-round(x.x))*(x.x-round(x.x))+(x.y-round(x.y))*(x.y-round(x.y))+(x.z-round(x.z))*(x.z-round(x.z))) << "\n";
			sub->setTransformation(closestPoint(x));
			EGS_Float temp = sub->hownear(ireg-base->regions(),x);
			if(debug) cout << "\tReturning " << base->hownear(ireg,x) << "\n";
			if (temp < base->hownear(ireg,x))
				return temp;
		}
		return base->hownear(ireg,x);
    };

    int getMaxStep() const
	{
		int debug = 0;
		if(debug) cout << "lattice  getMaxStep()\n";
		return maxStep;
    };

    // Not sure about the following.
    // If I leave the implementation that way, all transformed copies of a 
    // geometry share the same boolean properties. But that may not be 
    // what the user wants. So, I should implement both options: 
    // all copies share the same properties and the user has the options 
    // to define separate properties for each copy.
    bool hasBooleanProperty(int ireg, EGS_BPType prop) const
	{
		int debug = 0;
		if(debug) cout << "lattice  hasBooleanProperty([" << ireg << "])\n";
        return base->hasBooleanProperty(ireg,prop);
    };
	
    void setBooleanProperty(EGS_BPType prop)
	{
		int debug = 0;
		if(debug) cout << "lattice  setBooleanProperty()\n";
        base->setBooleanProperty(prop);
    };
	
    void addBooleanProperty(int bit)
	{
		int debug = 0;
		if(debug) cout << "lattice  addBooleanProperty()\n";
        base->addBooleanProperty(bit);
    };
	
    void setBooleanProperty(EGS_BPType prop, int start, int end, int step=1)
	{
		int debug = 0;
		if(debug) cout << "lattice  setBooleanProperty()\n";
        base->setBooleanProperty(prop,start,end,step);
    };
	
    void addBooleanProperty(int bit, int start, int end, int step=1)
	{
		int debug = 0;
		if(debug) cout << "lattice  addBooleanProperty()\n";
        base->addBooleanProperty(bit,start,end,step);
    };

    const string &getType() const
	{
		int debug = 0;
		if(debug) cout << "lattice  getType()\n";
		return type;
	};

    EGS_Float getRelativeRho(int ireg) const
	{
		int debug = 0;
		if(debug) cout << "lattice  getRelativeRho()\n";
        return base->getRelativeRho(ireg);
    }
    void setRelativeRho(int start, int end, EGS_Float rho);
    void setRelativeRho(EGS_Input *);

protected:

    /*! \brief Don't define media in the transformed geometry definition.

    This function is re-implemented to warn the user to not define 
    media in the definition of a transformed geometry. Instead, media should 
    be defined when specifying the geometry to be transformed.
    */
    void setMedia(EGS_Input *inp,int,const int *);

};

#endif
